
// environSuit
GLSL_SHADER const char ES3_ENVIROSUIT_VERT[] =
"#version 300 es\n"
"//#pragma optimize(off)\n"
"\n"
"precision mediump float;\n"
"\n"
"uniform highp mat4 u_modelViewProjectionMatrix;\n"
"\n"
"uniform highp vec4 u_vertexParm0; // local[0]    scroll\n"
"uniform highp vec4 u_vertexParm1; // local[1]    deform magnitude (1.0 is reasonable, 2.0 is twice as wavy, 0.5 is half as wavy, etc)\n"
"\n"
"in vec4 attr_TexCoord;\n"
"in highp vec4 attr_Vertex;\n"
"\n"
"out vec2 var_TexCoord0; // texCoord[1] is the model surface texture coords\n"
"// out vec4 var_TexCoord1; // texCoord[2] is the copied deform magnitude\n"
"out vec4 var_Color;\n"
"\n"
"void main(void)\n"
"{\n"
"    // texture 1 takes the texture coordinates and adds a scroll\n"
"    var_TexCoord0 = attr_TexCoord.xy;\n"
"    // var_TexCoord1 = attr_TexCoord + u_vertrxParm0;\n"
"\n"
"    // magnitude of scale\n"
"    var_Color = u_vertexParm1;\n"
"\n"
"    gl_Position = u_modelViewProjectionMatrix * attr_Vertex;\n"
"}\n"
;

GLSL_SHADER const char ES3_ENVIROSUIT_FRAG[] =
"#version 300 es\n"
"//#pragma optimize(off)\n"
"\n"
"precision mediump float;\n"
"\n"
"uniform sampler2D u_fragmentMap0; // texture 0 is _currentRender\n"
"uniform sampler2D u_fragmentMap1; // texture 1 is a normal map that we will use to deform texture 0\n"
"\n"
"uniform highp vec4 u_nonPowerOfTwo; // env[0] is the 1.0 to _currentRender conversion\n"
"uniform highp vec4 u_windowCoords; // env[1] is the fragment.position to 0.0 - 1.0 conversion\n"
"\n"
"in vec2 var_TexCoord0;\n"
"// in vec4 var_TexCoord1;\n"
"in vec4 var_Color;\n"
"\n"
"out vec4 _gl_FragColor;\n"
"\n"
"void main(void)\n"
"{\n"
"    // COMPUTE UNADJUSTED/ADJUSTED TEXCOORDS\n"
"    vec4 unadjustedTC = gl_FragCoord * u_windowCoords;\n"
"\n"
"    // compute warp factor\n"
"    vec4 R0 = texture(u_fragmentMap1, unadjustedTC.xy);\n"
"    R0 = R0 * var_Color;\n"
"    vec4 warpFactor = 1.0 - R0;\n"
"\n"
"    // compute _currentRender preturbed texcoords\n"
"    R0 = unadjustedTC;\n"
"\n"
"    R0.xy = R0.xy - 0.5;\n"
"    R0.xy = R0.xy * warpFactor.xy;\n"
"    R0.xy = R0.xy + 0.5;\n"
"\n"
"    // scale by the screen non-power-of-two-adjust\n"
"    R0 = R0 * u_nonPowerOfTwo;\n"
"\n"
"    // do the _currentRender lookup\n"
"    _gl_FragColor = vec4(texture(u_fragmentMap0, R0.xy).xyz, 1.0);\n"
"}\n"
;
