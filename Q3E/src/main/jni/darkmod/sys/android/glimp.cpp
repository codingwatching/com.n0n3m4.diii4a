/*****************************************************************************
The Dark Mod GPL Source Code

This file is part of the The Dark Mod Source Code, originally based
on the Doom 3 GPL Source Code as published in 2011.

The Dark Mod Source Code is free software: you can redistribute it
and/or modify it under the terms of the GNU General Public License as
published by the Free Software Foundation, either version 3 of the License,
or (at your option) any later version. For details, see LICENSE.TXT.

Project: The Dark Mod (http://www.thedarkmod.com/)

******************************************************************************/
#include "../../idlib/precompiled.h"
#include "../../renderer/tr_local.h"
#include "local.h"

#define Q3E_PRINTF common->Printf
#define Q3E_ERRORF common->Error
#define Q3E_DEBUGF Sys_Printf
#define Q3Ebool bool
#define Q3E_TRUE true
#define Q3E_FALSE false
#define Q3E_POST_GL_INIT GLES_PostInit();

extern void GLES_PostInit(void);

#include "q3e/q3e_glimp.inc"

idCVar r_customMonitor( "r_customMonitor", "0", CVAR_RENDERER|CVAR_INTEGER|CVAR_ARCHIVE|CVAR_NOCHEAT, "Select monitor to use for fullscreen mode (0 = primary)" );

void GLimp_AndroidOpenWindow(volatile ANativeWindow *w)
{
    Q3E_RequireWindow(w);
}

void GLimp_AndroidInit(volatile ANativeWindow *w)
{
    if(Q3E_NoDisplay())
        return;

    if(Q3E_RequireWindow(w))
        Q3E_RestoreGL();
}

void GLimp_AndroidQuit(void)
{
    Q3E_DestroyGL(true);
}

void GLimp_ActivateContext() {
    Q3E_ActivateContext();
}

void GLimp_DeactivateContext() {
    Q3E_DeactivateContext();
}

/*
=================
GLimp_RestoreGamma

save and restore the original gamma of the system
=================
*/
void GLimp_RestoreGamma() {}

/*
=================
GLimp_SetGamma

gamma ramp is generated by the renderer from r_gamma and r_brightness for 256 elements
the size of the gamma ramp can not be changed on X (I need to confirm this)
=================
*/
void GLimp_SetGamma(unsigned short red[256], unsigned short green[256], unsigned short blue[256]) {
	//stgatilov: brightness and gamma adjustments are done in final shader pass
	return;
}

void GLimp_Shutdown() {
	if ( 1 ) {
        common->Printf( "...shutting down QGL\n" );
        Q3E_NO_DEBUG_OPENGL();
        GLimp_UnloadFunctions();

        Q3E_ShutdownGL();
	}
}

void GLimp_SwapBuffers() {
    if ( r_swapInterval.IsModified() ) {
        r_swapInterval.ClearModified();
        Q3E_SwapInterval( r_swapInterval.GetInteger() );
    }
    Q3E_SwapBuffers();
}

/*
===============
GLES_Init
===============
*/

bool GLimp_OpenDisplay(void)
{
    if(Q3E_HasDisplay()) {
        return true;
    }

    if (cvarSystem->GetCVarInteger("net_serverDedicated") == 1) {
        common->DPrintf("not opening the display: dedicated server\n");
        return false;
    }

    return Q3E_OpenDisplay();
}

void GLES_PostInit(void) {
    glConfig.isFullscreen = true;

    cvarSystem->SetCVarInteger( "r_multiSamples", Q3E_GL_CONFIG(samples) );

    if (glConfig.isFullscreen) {
        Sys_GrabMouseCursor(true);
    }
}

/*
===================
GLimp_Init

This is the platform specific OpenGL initialization function.  It
is responsible for loading OpenGL, initializing it,
creating a window of the appropriate size, doing
fullscreen manipulations, etc.  Its overall responsibility is
to make sure that a functional OpenGL subsystem is operating
when it returns to the ref.

If there is any failure, the renderer will revert back to safe
parameters and try again.
===================
*/
bool GLimp_Init( glimpParms_t a ) {
    Q3E_GL_CONFIG_SET(fullscreen, 1);
    Q3E_GL_CONFIG_SET(samples, cvarSystem->GetCVarInteger( "r_multiSamples" ));
    Q3E_GL_CONFIG_SET(swap_interval, -1);
    Q3E_GL_CONFIG_ES_3_2();

    if (!GLimp_OpenDisplay()) {
        return false;
    }

    if (!GLES_Init()) {
        return false;
    }

	common->Printf( "...initializing QGL\n" );
	//load all function pointers available in the final context
	GLimp_LoadFunctions();

    Q3E_DEBUG_OPENGL();
    //has_gl_context = true;
	
	return true;
}

/*
===================
GLimp_SetScreenParms
===================
*/
bool GLimp_SetScreenParms( glimpParms_t parms ) {
	return true;
}

bool Sys_GetCurrentMonitorResolution( int &width, int &height ) {
    width = screen_width;
    height = screen_height;
    return true;
}
