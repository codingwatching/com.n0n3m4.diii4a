postprocess_ssao
{
	vertex
	{
		gl_Position = TransformVertex($mvpMatrixX, $mvpMatrixY, $mvpMatrixZ, $mvpMatrixW);
		vertex_texcoord0 = attr_TexCoord0;
	}

	pixel
	{
		vec2 texcoord = vertex_texcoord0.xy;

		float skippass = texture($screenmaterialtexture, vertex_texcoord0.xy).x;
		if(skippass != 0.0)
		{
			finalpixel_color = vec4(1.0, 1.0, 1.0, 1.0);
			return;
		}
		

		const float total_strength = 1.5;
  const float base = 0.2;
  
  const float area = 0.0075;
  const float falloff = 0.0000005;
  
  const float radius = 0.009;

		float time = $screeninfo.z;
  
  		const int samples = 16;  
  		vec3 sample_sphere[samples];

		sample_sphere[0] = vec3( 0.5381, 0.1856,-0.4319);
		sample_sphere[1] = vec3( 0.1379, 0.2486, 0.4430);
		sample_sphere[2] = vec3( 0.3371, 0.5679,-0.0057);
		sample_sphere[3] = vec3(-0.6999,-0.0451,-0.0019);
		sample_sphere[4] = vec3( 0.0560, 0.0069,-0.1843);
		sample_sphere[5] = vec3(-0.0146, 0.1402, 0.0762);
		sample_sphere[6] = vec3( 0.0100,-0.1924,-0.0344);
		sample_sphere[7] = vec3(-0.3577,-0.5301,-0.4358);
		sample_sphere[8] = vec3(-0.3169, 0.1063, 0.0158);
		sample_sphere[9] =  vec3( 0.0103,-0.5869, 0.0046);
		sample_sphere[10] = vec3(-0.0897,-0.4940, 0.3287);
		sample_sphere[11] = vec3( 0.7119,-0.0154,-0.0918);
		sample_sphere[12] = vec3(-0.0533, 0.0596,-0.5411);
		sample_sphere[13] = vec3( 0.0352,-0.0631, 0.5460);
		sample_sphere[14] = vec3(-0.4776, 0.2847,-0.0271);
		sample_sphere[15] = vec3(-0.2776, 0.8847,-0.3871);

		vec2 noise = randnoise(vertex_texcoord0.xy, $screeninfo.x, $screeninfo.y, 0.0002);
		vec3 random;
		random.x = fract(noise.x)*2.0 - 1.0;
		random.y = fract(noise.y*1.2154)*2.0 - 1.0;
		random.z = fract(noise.x*1.3453)*2.0 - 1.0;

		float depth = texture($screendepthtexture, vertex_texcoord0.xy).x;
		depth = depth;

		vec3 normal = -texture($screennormaltexture, vertex_texcoord0.xy).xyz;

		vec3 position;
		position.x = texcoord.x;
		position.y = texcoord.y;
		position.z = depth;

		float radius_depth = radius/depth;
  		float occlusion = 0.0;

 		for(int i=0; i < samples; i++) {  
    			vec3 ray = radius_depth * reflect(sample_sphere[i], random);
			vec3 hemi_ray = position + sign(dot(ray,normal)) * ray;

			vec3 occ_normal = -texture($screennormaltexture, saturate(hemi_ray.xy)).xyz;
	
			vec3 occ_diff = occ_normal - normal;
	
			if(length(occ_diff) < 0.05)
			{
				continue;
			}
    
		      float occ_depth = texture($screendepthtexture, saturate(hemi_ray.xy)).r;
			occ_depth = occ_depth;

    			float difference = depth - occ_depth;
    
    			occlusion += step(falloff, difference) * (1.0-smoothstep(falloff, area, difference));
		}
  
		float ao = 1.0 - total_strength * occlusion * (1.0 / float(samples));

		finalpixel_color = vec4(ao, ao, ao, depth);
	}
}

postprocess_upscale
{
	vertex
	{
		gl_Position = TransformVertex($mvpMatrixX, $mvpMatrixY, $mvpMatrixZ, $mvpMatrixW);
		vertex_texcoord0 = attr_TexCoord0;
	}

	pixel
	{
		vec2 texcoord = vertex_texcoord0.xy;
        float Sharpness = 0.8;

        // fetch a 3x3 neighborhood around the pixel 'e',
        //  a b c
        //  d(e)f
        //  g h i
        //  int2 bufferSize = textureSize2D(diffuseImage);
        float pixelX = 1.0 / $screeninfo.x;
        float pixelY = 1.0 / $screeninfo.y;
   
        vec3 a = texture($albedotexture, texcoord + vec2(-pixelX, -pixelY)).rgb;
        vec3 b = texture($albedotexture, texcoord + vec2(0.0, -pixelY)).rgb;
        vec3 c = texture($albedotexture, texcoord + vec2(pixelX, -pixelY)).rgb;
        vec3 d = texture($albedotexture, texcoord + vec2(-pixelX, 0.0)).rgb;
        vec3 e = texture($albedotexture, texcoord).rgb;
        vec3 f = texture($albedotexture, texcoord + vec2(pixelX, 0.0)).rgb;
        vec3 g = texture($albedotexture, texcoord + vec2(-pixelX, pixelY)).rgb;
        vec3 h = texture($albedotexture, texcoord + vec2(0.0, pixelY)).rgb;
        vec3 i = texture($albedotexture, texcoord + vec2(pixelX, pixelY)).rgb;
 
        // Soft min and max.
	    //  a b c             b
	    //  d e f * 0.5  +  d e f * 0.5
	    //  g h i             h
        // These are 2.0x bigger (factored out the extra multiply).
        float mnR = Min3( Min3(d.r, e.r, f.r), b.r, h.r);
        float mnG = Min3( Min3(d.g, e.g, f.g), b.g, h.g);
        float mnB = Min3( Min3(d.b, e.b, f.b), b.b, h.b);
        
        float mnR2 = Min3( Min3(mnR, a.r, c.r), g.r, i.r);
        float mnG2 = Min3( Min3(mnG, a.g, c.g), g.g, i.g);
        float mnB2 = Min3( Min3(mnB, a.b, c.b), g.b, i.b);
        mnR = mnR + mnR2;
        mnG = mnG + mnG2;
        mnB = mnB + mnB2;
        
        float mxR = Max3( Max3(d.r, e.r, f.r), b.r, h.r);
        float mxG = Max3( Max3(d.g, e.g, f.g), b.g, h.g);
        float mxB = Max3( Max3(d.b, e.b, f.b), b.b, h.b);
        
        float mxR2 = Max3( Max3(mxR, a.r, c.r), g.r, i.r);
        float mxG2 = Max3( Max3(mxG, a.g, c.g), g.g, i.g);
        float mxB2 = Max3( Max3(mxB, a.b, c.b), g.b, i.b);
        mxR = mxR + mxR2;
        mxG = mxG + mxG2;
        mxB = mxB + mxB2;
        
        // Smooth minimum distance to signal limit divided by smooth max.
        float rcpMR = rcp(mxR);
        float rcpMG = rcp(mxG);
        float rcpMB = rcp(mxB);

        float ampR = saturate(min(mnR, 2.0 - mxR) * rcpMR);
        float ampG = saturate(min(mnG, 2.0 - mxG) * rcpMG);
        float ampB = saturate(min(mnB, 2.0 - mxB) * rcpMB);
        
        // Shaping amount of sharpening.
        ampR = sqrt(ampR);
        ampG = sqrt(ampG);
        ampB = sqrt(ampB);
    
        // Filter shape.
        //  0 w 0
        //  w 1 w
        //  0 w 0  
        float peak = -rcp(mix(8.0, 5.0, saturate(Sharpness)));
        
        float wR = ampR * peak;
        float wG = ampG * peak;
        float wB = ampB * peak;
        
        float rcpWeightR = rcp(1.0 + 4.0 * wR);
        float rcpWeightG = rcp(1.0 + 4.0 * wG);
        float rcpWeightB = rcp(1.0 + 4.0 * wB);
   
   		vec3 outColor = vec3(saturate((b.r*wR+d.r*wR+f.r*wR+h.r*wR+e.r)*rcpWeightR),
                            saturate((b.g*wG+d.g*wG+f.g*wG+h.g*wG+e.g)*rcpWeightG),
                            saturate((b.b*wB+d.b*wB+f.b*wB+h.b*wB+e.b)*rcpWeightB));

		finalpixel_color.xyz = outColor;
        finalpixel_color.w = 1.0;
	}
}

postprocess_bloom
{
	vertex
	{
		gl_Position = TransformVertex($mvpMatrixX, $mvpMatrixY, $mvpMatrixZ, $mvpMatrixW);
		vertex_texcoord0 = attr_TexCoord0;
	}

	pixel
	{
		vec2 texcoord = vertex_texcoord0.xy;

		float skippass = texture($screenmaterialtexture, vertex_texcoord0.xy).y;
		if(skippass == 0.0)
			discard;

		finalpixel_color.xyz = blur13($albedotexture, vertex_texcoord0.xy, $screeninfo.xy * 0.25, vec2(0.0, 1.0)).xyz;
 		finalpixel_color.xyz += blur13($albedotexture, vertex_texcoord0.xy, $screeninfo.xy * 0.25, vec2(1.0, 0.0)).xyz;
		finalpixel_color.w = 1.0;
	}
}

postprocess_ssao_blur
{
	vertex
	{
		gl_Position = TransformVertex($mvpMatrixX, $mvpMatrixY, $mvpMatrixZ, $mvpMatrixW);
		vertex_texcoord0 = attr_TexCoord0;
	}

	pixel
	{
		vec2 texcoord = vertex_texcoord0.xy;

		finalpixel_color.xyz = blur13($screenxyztexture, vertex_texcoord0.xy, $screeninfo.xy * 0.5, vec2(0.0, 1.0)).xyz;
 		finalpixel_color.xyz += blur13($screenxyztexture, vertex_texcoord0.xy, $screeninfo.xy  * 0.5, vec2(1.0, 0.0)).xyz;
		finalpixel_color.w = 1.0;
		finalpixel_color = finalpixel_color * finalpixel_color;
	}
}
